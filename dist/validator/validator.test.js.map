{"version":3,"sources":["../../src/validator/validator.test.js"],"names":["dataDir","resolve","__dirname","prods","nutrs","nutrChange","productSchema","orderedKeys","Object","keys","properties","describe","test","unorderedProduct","readFileSync","orderedProduct","unorderedProcesses","processes","expectedOrderedProcesses","orderedProcesses","expect","toEqual","it","expectedOrderedProduct","productWithEmptyArrays","id","name","synonyms","validateProduct","result","toMatchSnapshot","length","toBe","productWithArrayWithEmptyObject","key","expectedValidationSummary","isValid","parentProduct","brokenLinks","missingFields","missingMandatoryFields","validationErrors","someProduct","productWithValidationSummary","validationSummary","existingValidationSummary","validatedProduct","expectedValidationErrors","productWithWrongTypes","validatedProductWithWrongTypes","expectedParentProduct","pathToChild","child","productWithParent","pathToGrandParent","grandParent","validatedGrandParent","pathToLonelychild","lonelyChild","validatedLonelyChild","expectedMissingFields","pathToFullProduct","fullProduct","validatedFullProduct","expectedBrokenLinks","productWithBrokenNutritionId","productWithNoNutritionId","productWithBrokenNutrChangeId","productWithNoNutrChangeId","toBeTruthy","pathToProduct","productWithoutSummary","classifyProd","toThrow","validatorPipeline","field","pathToParent","parent","expectedReturnValue","getField","returnValue","validateParent","validatedParent","validateChild","validatedChild","tags","perishability","process","contains","substance","percentage","enhanceChild"],"mappings":"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","file":"validator.test.js","sourcesContent":["import path from 'path'\nimport jsonfile from 'jsonfile'\nimport {pipe} from 'ramda'\nimport {\n  loadProduct,\n  loadAllProducts,\n  loadNutrs,\n  loadNutrChange,\n  loadProductSchema,\n  removeHelperFields\n} from './helpers/helpers'\nimport {\n  orderProcesses,\n  orderProduct,\n  removeEmptyObjectsFromArrays,\n  removeEmptyArrays,\n  addValidationSummary,\n  schemaValidate,\n  addParentProduct,\n  fillValidationSummary,\n  validateNutritionId,\n  validateNutrChangeId,\n  classify,\n  getFieldFromParent,\n  pullFieldsFromParent,\n  pullAndAddFieldsFromParent\n} from './validator'\nimport {OPTIONAL_FIELDS_FROM_LINKED_PRODUCT} from './validator'\nimport {ALL_FIELDS_FROM_LINKED_PRODUCT} from \"./validator\";\n\n// Point to fake test resources and load some standard resources\nconst dataDir = path.resolve(`${__dirname}`, './eaternity-edb-data-fake')\nconst prods = loadAllProducts(dataDir)\nconst nutrs = loadNutrs(dataDir)\nconst nutrChange = loadNutrChange(dataDir)\nconst productSchema = loadProductSchema(dataDir)\nconst orderedKeys = Object.keys(productSchema.properties)\n\ndescribe('validator', () => {\n  test('_orderProcesses correctly orders processes array', () => {\n    const unorderedProduct = jsonfile.readFileSync(\n      `${dataDir}/prods/11-unordered-prod.json`\n    )\n    const orderedProduct = jsonfile.readFileSync(\n      `${dataDir}/prods/12-ordered-prod.json`\n    )\n    const unorderedProcesses = unorderedProduct.processes\n    const expectedOrderedProcesses = orderedProduct.processes\n    const orderedProcesses = orderProcesses(unorderedProcesses)\n    expect(orderedProcesses).toEqual(expectedOrderedProcesses)\n  })\n\n  it('orderProduct orders a product according to a list of keys', () => {\n    const unorderedProduct = jsonfile.readFileSync(\n      `${dataDir}/prods/11-unordered-prod.json`\n    )\n    const expectedOrderedProduct = jsonfile.readFileSync(\n      `${dataDir}/prods/12-ordered-prod.json`\n    )\n    const orderedProduct = orderProduct(orderedKeys)(unorderedProduct)\n    expect(removeHelperFields(orderedProduct)).toEqual(\n      removeHelperFields(expectedOrderedProduct)\n    )\n  })\n\n  test('removeEmptyArrays removes all fields holding []', () => {\n    const productWithEmptyArrays = {\n      id: 1234,\n      name: 'test',\n      synonyms: [],\n      'co2-value': 42,\n      processes: []\n    }\n\n    const validateProduct = pipe(\n      removeEmptyArrays(orderedKeys),\n      // this is just to remove the empty fields\n      orderProduct(orderedKeys)\n    )\n\n    const result = validateProduct(productWithEmptyArrays)\n    expect(result).toMatchSnapshot()\n    expect(Object.keys(result).length).toBe(\n      Object.keys(productWithEmptyArrays).length - 2\n    )\n  })\n\n  test('removeEmptyObjectsFromArrays removes [{}]', () => {\n    const productWithArrayWithEmptyObject = {\n      id: 15,\n      processes: [{key: 'value'}, {}]\n    }\n\n    const result = removeEmptyObjectsFromArrays(orderedKeys)(\n      productWithArrayWithEmptyObject\n    )\n    expect(result).toMatchSnapshot()\n  })\n\n  test('addValidationSummary adds validationSummary to product', () => {\n    // define a validationResult\n    const expectedValidationSummary = {\n      isValid: false,\n      parentProduct: '',\n      brokenLinks: [],\n      missingFields: [],\n      missingMandatoryFields: [],\n      validationErrors: []\n    }\n\n    const someProduct = {\n      id: 1,\n      name: 'Some product'\n    }\n\n    const productWithValidationSummary = addValidationSummary(someProduct)\n    const {validationSummary} = productWithValidationSummary\n\n    expect(productWithValidationSummary.id).toEqual(1)\n    expect(productWithValidationSummary.name).toEqual('Some product')\n    expect(validationSummary).toEqual(expectedValidationSummary)\n  })\n\n  test('addValidationSummary does not overwrite existing summary', () => {\n    // define a validationResult\n    const existingValidationSummary = {\n      isValid: false,\n      parentProduct: '2-parent-prod.json',\n      brokenLinks: ['nutr-change-id'],\n      missingFields: ['perishability'],\n      validationErrors: []\n    }\n    const productWithValidationSummary = {\n      id: 1,\n      name: 'Some product',\n      validationSummary: existingValidationSummary\n    }\n    const validatedProduct = addValidationSummary(productWithValidationSummary)\n    const {validationSummary} = validatedProduct\n    expect(validationSummary).toEqual(existingValidationSummary)\n  })\n\n  test('schemaValidate catches schema errors and adds them to summary', () => {\n    const expectedValidationErrors = [\n      'instance.synonyms[0] is not of a type(s) string',\n      'instance.tags is not of a type(s) string',\n      'instance.co2-value is not of a type(s) number'\n    ]\n    const productWithWrongTypes = jsonfile.readFileSync(\n      `${dataDir}/prods/9-wrong-types-prod.json`\n    )\n    const validatedProductWithWrongTypes = schemaValidate(\n      productSchema,\n      productWithWrongTypes\n    )\n    const {validationErrors} = validatedProductWithWrongTypes.validationSummary\n    expect(validationErrors).toEqual(expectedValidationErrors)\n  })\n\n  it('addParentProduct adds name of parent product to summary', () => {\n    const expectedParentProduct = '2-parent-prod.json'\n    const pathToChild = `${dataDir}/prods/3-child-prod.json`\n    const child = jsonfile.readFileSync(pathToChild)\n    const productWithParent = addParentProduct(prods, child)\n    const {parentProduct} = productWithParent.validationSummary\n    expect(parentProduct).toEqual(expectedParentProduct)\n  })\n\n  it('addParentProduct adds name of parent product to summary', () => {\n    const expectedParentProduct = '2-parent-prod.json'\n    const pathToChild = `${dataDir}/prods/3-child-prod.json`\n    const child = loadProduct(pathToChild)\n    const productWithParent = addParentProduct(prods, child)\n    const {parentProduct} = productWithParent.validationSummary\n    expect(parentProduct).toEqual(expectedParentProduct)\n  })\n\n  it('addParentProduct adds empty string as parent when not linked', () => {\n    const expectedParentProduct = ''\n    const pathToGrandParent = `${dataDir}/prods/1-grand-parent-prod.json`\n    const grandParent = loadProduct(pathToGrandParent)\n    const validatedGrandParent = addParentProduct(prods, grandParent)\n    const {parentProduct} = validatedGrandParent.validationSummary\n    expect(parentProduct).toEqual(expectedParentProduct)\n  })\n\n  it('addParentProduct adds empty string as parent when link broken', () => {\n    const expectedParentProduct = ''\n    const pathToLonelychild = `${dataDir}/prods/4-lonely-child-prod.json`\n    const lonelyChild = loadProduct(pathToLonelychild)\n    const validatedLonelyChild = addParentProduct(prods, lonelyChild)\n    const {parentProduct} = validatedLonelyChild.validationSummary\n    expect(parentProduct).toEqual(expectedParentProduct)\n  })\n\n  test('addMissingLinkedFieldsToValidationSummary adds all missing fields', () => {\n    const expectedMissingFields = ALL_FIELDS_FROM_LINKED_PRODUCT\n    const pathToGrandParent = `${dataDir}/prods/3-child-prod.json`\n    const grandParent = loadProduct(pathToGrandParent)\n    const validatedGrandParent = fillValidationSummary(grandParent)\n    const {missingFields} = validatedGrandParent.validationSummary\n    expect(missingFields).toEqual(expectedMissingFields)\n  })\n\n  test('addMissingLinkedFieldsToValidationSummary adds nothing when no missing fields', () => {\n    const expectedMissingFields = []\n    const pathToFullProduct = `${dataDir}/prods/14-full-prod.json`\n    const fullProduct = loadProduct(pathToFullProduct)\n    const validatedFullProduct = fillValidationSummary(fullProduct)\n    const {missingFields} = validatedFullProduct.validationSummary\n    expect(missingFields).toEqual(expectedMissingFields)\n  })\n\n  test('validateNutritionId finds and adds broken nutrition-id links', () => {\n    const expectedBrokenLinks = ['nutrition-id']\n    const productWithBrokenNutritionId = jsonfile.readFileSync(\n      `${dataDir}/prods/5-broken-nutrition-id-prod.json`\n    )\n    const validatedProduct = validateNutritionId(\n      nutrs,\n      productWithBrokenNutritionId\n    )\n\n    const {brokenLinks} = validatedProduct.validationSummary\n    expect(brokenLinks).toEqual(expectedBrokenLinks)\n  })\n\n  test('validateNutritionId adds nothing when nutrition-id missing', () => {\n    const expectedBrokenLinks = []\n    const productWithNoNutritionId = jsonfile.readFileSync(\n      `${dataDir}/prods/3-child-prod.json`\n    )\n    const validatedProduct = validateNutritionId(\n      nutrs,\n      productWithNoNutritionId\n    )\n\n    const {brokenLinks} = validatedProduct.validationSummary\n    expect(brokenLinks).toEqual(expectedBrokenLinks)\n  })\n\n  test('validateNutrChangeId finds and adds broken nutr-change links', () => {\n    const expectedBrokenLinks = ['nutr-change-id']\n    const productWithBrokenNutrChangeId = jsonfile.readFileSync(\n      `${dataDir}/prods/6-broken-nutr-change-id-prod.json`\n    )\n    const validatedProduct = validateNutrChangeId(\n      nutrChange,\n      productWithBrokenNutrChangeId\n    )\n\n    const {brokenLinks} = validatedProduct.validationSummary\n    expect(brokenLinks).toEqual(expectedBrokenLinks)\n  })\n\n  test('validateNutrChangeId adds nothing when nutr-change-id missing', () => {\n    const expectedBrokenLinks = []\n    const productWithNoNutrChangeId = jsonfile.readFileSync(\n      `${dataDir}/prods/3-child-prod.json`\n    )\n    const validatedProduct = validateNutrChangeId(\n      nutrChange,\n      productWithNoNutrChangeId\n    )\n\n    const {brokenLinks} = validatedProduct.validationSummary\n    expect(brokenLinks).toEqual(expectedBrokenLinks)\n  })\n\n  it('classify sets isValid to true if product is valid', () => {\n    const pathToFullProduct = `${dataDir}/prods/14-full-prod.json`\n    const fullProduct = loadProduct(pathToFullProduct)\n    const validateProduct = pipe(\n      orderProduct(orderedKeys),\n      schemaValidate(productSchema),\n      addParentProduct(prods),\n      fillValidationSummary,\n      validateNutritionId(nutrs),\n      validateNutrChangeId(nutrChange),\n      classify\n    )\n    const validatedProduct = validateProduct(fullProduct)\n    expect(validatedProduct.validationSummary.isValid).toBeTruthy()\n  })\n\n  it('classify throws Error when passed product without summary', () => {\n    const pathToProduct = `${dataDir}/prods/3-child-prod.json`\n    const productWithoutSummary = loadProduct(pathToProduct)\n    const classifyProd = () => classify(productWithoutSummary)\n    expect(classifyProd).toThrow(\n      'Cannot classify product without validationSummary'\n    )\n  })\n\n  it('pipe yourself a validator', () => {\n    const pathToFullProduct = `${dataDir}/prods/14-full-prod.json`\n    const fullProduct = loadProduct(pathToFullProduct)\n\n    const validatorPipeline = pipe(\n      schemaValidate(productSchema),\n      addParentProduct(prods),\n      fillValidationSummary,\n      validateNutritionId(nutrs),\n      validateNutrChangeId(nutrChange),\n      classify\n    )\n\n    const expectedValidationSummary = {\n      isValid: true,\n      parentProduct: '',\n      brokenLinks: [],\n      missingFields: [],\n      missingMandatoryFields: [],\n      validationErrors: []\n    }\n\n    const validatedProduct = validatorPipeline(fullProduct)\n    const {validationSummary} = validatedProduct\n    expect(validationSummary).toEqual(expectedValidationSummary)\n  })\n\n  it('getFieldFromParent gets field from parent', () => {\n    const prods = loadAllProducts(dataDir)\n    const field = 'co2-value'\n    const pathToParent = `${dataDir}/prods/2-parent-prod.json`\n    const parent = loadProduct(pathToParent)\n    const expectedReturnValue = {'co2-value': 1}\n    const getField = getFieldFromParent(prods)\n    const returnValue = getField(parent, field)\n    expect(returnValue).toEqual(expectedReturnValue)\n  })\n\n  it('getFieldFromParent recursively gets field from grand parent', () => {\n    const prods = loadAllProducts(dataDir)\n    const field = 'nutrition-id'\n    const pathToParent = `${dataDir}/prods/2-parent-prod.json`\n    const parent = loadProduct(pathToParent)\n    const expectedReturnValue = {'nutrition-id': '1'}\n    const getField = getFieldFromParent(prods)\n    const returnValue = getField(parent, field)\n    expect(returnValue).toEqual(expectedReturnValue)\n  })\n\n  it('pullFieldsFromParent pulls all missing fields from parent', () => {\n    const prods = loadAllProducts(dataDir)\n    const pathToParent = `${dataDir}/prods/2-parent-prod.json`\n    const parent = loadProduct(pathToParent)\n    const validateParent = pipe(addParentProduct(prods), fillValidationSummary)\n    const validatedParent = validateParent(parent)\n    const expectedReturnValue = {\n      'nutrition-id': '1',\n      'season-begin': 'from grandparent',\n      'season-end': 'from grandparent'\n    }\n    const returnValue = pullFieldsFromParent(prods, validatedParent)\n    expect(returnValue).toEqual(expectedReturnValue)\n  })\n\n  it('pullFieldsFromParent pulls fields from parent and grandparent', () => {\n    const prods = loadAllProducts(dataDir)\n    const pathToChild = `${dataDir}/prods/3-child-prod.json`\n    const child = loadProduct(pathToChild)\n    const validateChild = pipe(addParentProduct(prods), fillValidationSummary)\n    const validatedChild = validateChild(child)\n    const expectedReturnValue = {\n      'nutrition-id': '1',\n      tags: 'from, parent',\n      perishability: 'from parent',\n      'co2-value': 1,\n      'season-begin': 'from grandparent',\n      'season-end': 'from grandparent',\n      processes: [{'nutr-change-id': 1, process: 'from parent'}],\n      contains: [{\n        substance: 'from parent',\n        percentage: 4\n      }\n      ]\n    }\n    const returnValue = pullFieldsFromParent(prods, validatedChild)\n    expect(returnValue).toEqual(expectedReturnValue)\n  })\n\n  it('pullAndAddFieldsFromParent pulls and adds fields from summary', () => {\n    const prods = loadAllProducts(dataDir)\n    const pathToChild = `${dataDir}/prods/3-child-prod.json`\n    const child = loadProduct(pathToChild)\n    const enhanceChild = pipe(\n      addParentProduct(prods),\n      fillValidationSummary,\n      pullAndAddFieldsFromParent(prods),\n      removeHelperFields\n    )\n    const expectedReturnValue = {\n      id: 3,\n      name: 'Child',\n      'linked-id': '2',\n      'nutrition-id': '1',\n      tags: 'from, parent',\n      perishability: 'from parent',\n      'co2-value': 1,\n      'season-begin': 'from grandparent',\n      'season-end': 'from grandparent',\n      processes: [{process: 'from parent', 'nutr-change-id': 1}],\n      contains: [{\n        substance: 'from parent',\n        percentage: 4\n      }\n      ]\n    }\n    const returnValue = enhanceChild(child)\n    expect(returnValue).toEqual(expectedReturnValue)\n  })\n})\n"]}