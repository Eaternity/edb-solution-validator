{"version":3,"sources":["../../../src/validator/helpers/helpers.test.js"],"names":["dataDir","resolve","__dirname","productSchema","orderedKeys","Object","keys","properties","describe","test","someObject","id","name","expectedObjectWithFilename","filename","objectWithFilename","expect","toEqual","filenames","expectedValidFilanames","validFilenames","filter","pathToProductWithInvalidName","toBeUndefined","it","pathToFile","someProduct","readFileSync","expectedProduct","product","allProducts","invalidFilename","productFilenames","readdirSync","correctProdFileNames","randomCorrectProductFilename","sample","randomCorrectProduct","prodsContainRandomCorrectProduct","some","isEqual","prod","length","toBeTruthy","faos","expectedFaos","nutrs","expectedNutrs","nutrChange","expectedNutrChange","expectedProductschema","productWithHelperFields","expectedProductWithoutHelpers","productWithoutHelpers","productWithValidation","expectedProductWithoutValidation","productWithoutValidation","productToSave","validationSummary","prodFilenames","includes","unlinkSync","prods","sampleProduct","randomProduct","element","productsReloaded","toHaveLength","find","fields","result","csvReloaded","encoding","toMatchSnapshot"],"mappings":"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","file":"helpers.test.js","sourcesContent":["import path from 'path'\nimport fs from 'fs'\nimport jsonfile from 'jsonfile'\nimport _ from 'lodash'\nimport {\n  isValidProductFilename,\n  addFilename,\n  removeHelperFields,\n  resetValidation,\n  loadProduct,\n  loadAllProducts,\n  loadFaos,\n  loadNutrs,\n  loadNutrChange,\n  loadProductSchema,\n  _saveProduct,\n  saveProduct,\n  saveAllProducts,\n  saveAllProductsToCsv\n} from './helpers'\n\n// Point to fake test resources\nconst dataDir = path.resolve(`${__dirname}`, '../eaternity-edb-data-fake')\nconst productSchema = loadProductSchema(dataDir)\nconst orderedKeys = Object.keys(productSchema.properties)\n\ndescribe('helpers', () => {\n  test('addFilename adds filename field to object', () => {\n    const someObject = {\n      id: 1,\n      name: 'some object'\n    }\n    const expectedObjectWithFilename = {\n      id: 1,\n      name: 'some object',\n      filename: 'some-object.json'\n    }\n    const objectWithFilename = addFilename(someObject, 'some-object.json')\n    expect(objectWithFilename).toEqual(expectedObjectWithFilename)\n  })\n\n  test('isValidProductFilename knows valid filenames', () => {\n    const filenames = [\n      'prod.json',\n      '1234.json',\n      '1-a-prod.json',\n      '12-b-prod.json',\n      '123-a-b-prod.json',\n      '1234-a-b-c-prod.json'\n    ]\n    const expectedValidFilanames = [\n      '1-a-prod.json',\n      '12-b-prod.json',\n      '123-a-b-prod.json',\n      '1234-a-b-c-prod.json'\n    ]\n    const validFilenames = filenames.filter(filename => {\n      return isValidProductFilename(filename)\n    })\n    expect(validFilenames).toEqual(expectedValidFilanames)\n  })\n\n  test('loadProduct returns undefined when product filename is invalid', () => {\n    const pathToProductWithInvalidName =\n      `${dataDir}/prods/10-wrong-filename.json`\n    expect(loadProduct(pathToProductWithInvalidName)).toBeUndefined()\n  })\n\n  it('loadProduct loads product with correct filename', () => {\n    const pathToFile = `${dataDir}/prods/3-child-prod.json`\n    const someProduct = jsonfile.readFileSync(pathToFile)\n    const expectedProduct = addFilename(someProduct, '3-child-prod.json')\n    const product = loadProduct(pathToFile)\n    expect(product).toEqual(expectedProduct)\n  })\n\n  test('loadAllProducts loads all products with valid filename', () => {\n    const allProducts = loadAllProducts(dataDir)\n    const invalidFilename = '10-wrong-filename.json'\n    const productFilenames = fs.readdirSync(`${dataDir}/prods`)\n    const correctProdFileNames = productFilenames.filter(filename => {\n      return filename !== invalidFilename\n    })\n    const randomCorrectProductFilename = _.sample(correctProdFileNames)\n    const randomCorrectProduct = jsonfile.readFileSync(\n      `${dataDir}/prods/${randomCorrectProductFilename}`\n    )\n\n    // loadAllProducts adds a filename field to each prouct during load\n    randomCorrectProduct.filename = randomCorrectProductFilename\n\n    const prodsContainRandomCorrectProduct = allProducts.some(prod => {\n      return _.isEqual(prod, randomCorrectProduct)\n    })\n\n    expect(allProducts.length).toEqual(13)\n    expect(prodsContainRandomCorrectProduct).toBeTruthy()\n  })\n\n  test('loadFaos loads fao-product-list.json correctly', () => {\n    const faos = loadFaos(dataDir)\n    const expectedFaos = [\n      {\n        'fao-code': 1,\n        'fao-name': 'FAO 1',\n        'definition': 'Definition 1'\n      },\n      {\n        'fao-code': 2,\n        'fao-name': 'FAO 2',\n        'definition': 'Definition 2'\n      }\n    ]\n\n    expect(faos).toEqual(expectedFaos)\n  })\n\n  test('loadNutrs only loads files with correct filename', () => {\n    const nutrs = loadNutrs(dataDir)\n    const expectedNutrs = [\n      {\n        'name': 'Fake nutr',\n        'id': '1'\n      }\n    ]\n    expect(nutrs).toEqual(expectedNutrs)\n  })\n\n  test('loadNutrChange only loads files with correct filename', () => {\n    const nutrChange = loadNutrChange(dataDir)\n    const expectedNutrChange = [\n      {\n        'id': 1,\n        'name': 'fake',\n        'process': 'cooked'\n      }\n    ]\n    expect(nutrChange).toEqual(expectedNutrChange)\n  })\n\n  test('loadProductSchema loads product schema', () => {\n    const expectedProductschema = jsonfile.readFileSync(\n      `${dataDir}/prod.schema.json`\n    )\n    const productSchema = loadProductSchema(dataDir)\n    expect(productSchema).toEqual(expectedProductschema)\n  })\n\n  test('_removeHelperFields removes filename and validationSummary', () => {\n    const productWithHelperFields = jsonfile.readFileSync(\n      `${dataDir}/prods/13-helpers-prod.json`\n    )\n    const expectedProductWithoutHelpers = {\n      'id': 13,\n      'name': 'Helpers'\n    }\n    const productWithoutHelpers = removeHelperFields(productWithHelperFields)\n    expect(productWithoutHelpers).toEqual(expectedProductWithoutHelpers)\n  })\n\n  test('resetValidation removes validationSummary', () => {\n    const productWithValidation = jsonfile.readFileSync(\n      `${dataDir}/prods/13-helpers-prod.json`\n    )\n    const expectedProductWithoutValidation = {\n      id: 13,\n      name: 'Helpers',\n      filename: '13-helpers-prod.json'\n    }\n    const productWithoutValidation = resetValidation(productWithValidation)\n    expect(productWithoutValidation).toEqual(expectedProductWithoutValidation)\n  })\n\n  it('_saveProduct removes helper fields and saves product', () => {\n    const filename = '100000-save-me-prod.json'\n    const pathToFile = `${dataDir}/prods/${filename}`\n    const productToSave = {\n      id: 100000,\n      name: 'save me',\n      filename,\n      validationSummary: {}\n    }\n\n    _saveProduct(removeHelperFields, dataDir, productToSave)\n\n    const prodFilenames = fs.readdirSync(`${dataDir}/prods`)\n    expect(prodFilenames.includes(filename)).toBeTruthy()\n\n    // clean up, maybe should be done in afterEach to account for async?\n    fs.unlinkSync(pathToFile)\n  })\n\n  it('partially applied saveProduct works like _saveProduct', () => {\n    const filename = '100000-save-me-prod.json'\n    const pathToFile = `${dataDir}/prods/${filename}`\n    const productToSave = {\n      id: 100000,\n      name: 'save me',\n      filename,\n      validationSummary: {}\n    }\n\n    saveProduct(dataDir, productToSave)\n\n    const prodFilenames = fs.readdirSync(`${dataDir}/prods`)\n    expect(prodFilenames.includes(filename)).toBeTruthy()\n\n    // clean up, maybe should be done in afterEach to account for async?\n    fs.unlinkSync(pathToFile)\n  })\n\n  it('saveAllProducts saves all prods to prods.all.json', () => {\n    const prods = loadAllProducts(dataDir)\n    const filename = 'prods.all.json'\n    const sampleProduct = _.sample(prods)\n\n    const randomProduct = element => _.isEqual(element, sampleProduct)\n\n    saveAllProducts(dataDir, prods)\n\n    const productsReloaded = jsonfile.readFileSync(`${dataDir}/${filename}`)\n    const filenames = fs.readdirSync(dataDir)\n\n    expect(productsReloaded).toHaveLength(13)\n    expect(productsReloaded.find(randomProduct)).toEqual(sampleProduct)\n    expect(filenames.includes(filename)).toBeTruthy()\n\n    // clean up, maybe should be done in afterEach to account for async?\n    fs.unlinkSync(`${dataDir}/${filename}`)\n  })\n\n  it('saveAllProductsToCsv saves prods to prods.all.csv', () => {\n    const prods = loadAllProducts(dataDir)\n    const filename = 'EDB_Products-Export.csv'\n    const fields = [...orderedKeys]\n\n    // calling saveAllProductsToCsv saves the file and returns the csv data\n    const result = saveAllProductsToCsv(fields, dataDir, prods)\n\n    const filenames = fs.readdirSync(dataDir)\n    const csvReloaded = fs.readFileSync(`${dataDir}/${filename}`, {\n      encoding: 'utf8'\n    })\n\n    expect(result).toMatchSnapshot()\n    expect(filenames.includes(filename)).toBeTruthy()\n    expect(csvReloaded).toEqual(result)\n\n    // clean up, maybe should be done in afterEach to account for async?\n    fs.unlinkSync(`${dataDir}/${filename}`)\n  })\n})\n"]}