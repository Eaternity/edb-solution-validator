{"version":3,"sources":["../../src/validator/validator.js"],"names":["UNIQUE_FIELDS","MANDATORY_FIELDS_FROM_LINKED_PRODUCT","OPTIONAL_FIELDS_FROM_LINKED_PRODUCT","MANDATORY_FIELDS","ALL_FIELDS_FROM_LINKED_PRODUCT","orderProcesses","keys","orderedProcesses","processes","filter","process","map","orderedProcess","key","Object","assign","orderContains","orderedSubstances","contains","substance","orderedSubstance","_orderProduct","orderedKeys","product","orderedPairs","undefined","orderedProduct","curriedOrderProduct","orderProduct","_removeEmptyArrays","Array","isArray","length","reduce","obj","newField","removeEmptyArrays","_removeEmptyObjectsFromArrays","element","constructor","field","removeEmptyObjectsFromArrays","addValidationSummary","validationSummary","isValid","parentProduct","brokenLinks","missingFields","missingMandatoryFields","validationErrors","hasValidationSummary","hasOwnProperty","every","includes","_schemaValidate","jsonschema","schema","validate","errors","error","stack","hasValidationErrors","curriedSchemaValidate","schemaValidate","_addParentProduct","prods","isLinked","parentName","filename","split","curriedAddParentProduct","addParentProduct","_fillValidationSummary","allFieldsFromLinkedProduct","fieldsMissing","mandatoryFieldsMissing","curriedFillValidationSummary","fillValidationSummary","_validateNutritionId","nutrs","hasNutritionId","nutritionId","linkedNutritionIdExists","some","nutrObj","id","curriedValidateNutritionId","validateNutritionId","_validateNutrChangeId","nutrChange","hasProcesses","hasNutritionChangeId","allNutritionChangeIds","processesObj","linkedNutritionChangeIdsExist","nutrChangeObj","nutritionChangeId","curriedValidateNutritionChangeId","validateNutrChangeId","classify","Error","hasBrokenLinks","hasMissingMandatoryFields","_getFieldFromParent","validatedParentProduct","pulledField","fieldExistsInParent","grandParent","validatedGrandParent","getFieldFromParent","_pullFieldsFromParent","validatedProduct","pulledFields","prev","curr","curriedPullFieldsFromParent","pullFieldsFromParent","_pullAndAddFieldsFromParent","curriedPullAndAddFieldsFromParent","pullAndAddFieldsFromParent"],"mappings":"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","file":"validator.js","sourcesContent":["// let's' try to write the complete validator in functional style\nimport jsonschema from 'jsonschema'\nimport {curry} from 'ramda'\n\n// Definition of product fields.\n\n/*\nThese fields are mandatory and NOT allowed to pull from the linked product.\n */\nconst UNIQUE_FIELDS = ['id', 'name']\n\n/*\nThese fields are mandatory, but are allowed to pull from the linked product.\n */\nconst MANDATORY_FIELDS_FROM_LINKED_PRODUCT = [\n  'nutrition-id',\n  'tags',\n  'perishability',\n  'co2-value'\n]\n\n/*\n These fields are optional, but are allowed to pull from the linked product.\n  */\nexport const OPTIONAL_FIELDS_FROM_LINKED_PRODUCT = [\n  'fao-product-id',\n  'water-scarcity-footprint-id',\n  'waste-id',\n  'season-begin',\n  'season-end',\n  'processes',\n  'allergenes',\n  'unit-weight',\n  'density',\n  'contains',\n  'production-names',\n  'production-values',\n  'conservation-names',\n  'conservation-values',\n  'processing-names',\n  'processing-values',\n  'packaging-names',\n  'packaging-values'\n]\n\n/*\nEvery product which can be exported shall contain this fields\n */\nexport const MANDATORY_FIELDS = [\n  ...UNIQUE_FIELDS,\n  ...MANDATORY_FIELDS_FROM_LINKED_PRODUCT\n]\n\n/*\nAll these fields are pulled from the linked product.\n */\nexport const ALL_FIELDS_FROM_LINKED_PRODUCT = [\n  ...MANDATORY_FIELDS_FROM_LINKED_PRODUCT,\n  ...OPTIONAL_FIELDS_FROM_LINKED_PRODUCT\n]\n\nexport const orderProcesses = processes => {\n  const keys = ['process', 'nutr-change-id']\n  const orderedProcesses = processes.filter(process => process).map(process => {\n    const orderedProcess = keys.map(key => {\n      return {[key]: process[key]}\n    })\n\n    return Object.assign({}, ...orderedProcess)\n  })\n\n  return orderedProcesses\n}\n\n// TODO this is code duplication with above - how to handle that?\nexport const orderContains = contains => {\n  const keys = ['substance', 'percentage']\n  const orderedSubstances = contains\n    .filter(substance => substance)\n    .map(substance => {\n      const orderedSubstance = keys.map(key => {\n        return {[key]: substance[key]}\n      })\n\n      return Object.assign({}, ...orderedSubstance)\n    })\n\n  return orderedSubstances\n}\n\nconst _orderProduct = (orderProcesses, orderContains, orderedKeys, product) => {\n  const orderedPairs = orderedKeys\n    .filter(key => product[key] !== undefined)\n    .map(key => {\n      if (key === 'processes') {\n        return {\n          [key]: orderProcesses(product[key])\n        }\n      } else if (key === 'contains') {\n        return {\n          [key]: orderContains(product[key])\n        }\n      } else {\n        return {[key]: product[key]}\n      }\n    })\n\n  const orderedProduct = Object.assign({}, ...orderedPairs)\n  return orderedProduct\n}\n\nconst curriedOrderProduct = curry(_orderProduct)\nexport const orderProduct = curriedOrderProduct(orderProcesses, orderContains)\n\nconst _removeEmptyArrays = (orderedKeys, product) =>\n  orderedKeys\n    .filter(key => !(Array.isArray(product[key]) && product[key].length === 0))\n    .map(key => {\n      return {[key]: product[key]}\n    })\n    .reduce((obj, newField) => Object.assign(obj, newField), {})\n\nexport const removeEmptyArrays = curry(_removeEmptyArrays)\n\nconst _removeEmptyObjectsFromArrays = (orderedKeys, product) =>\n  orderedKeys\n    // I really think we should also remove empty strings...\n    // .filter(key => product[key] !== '')\n    // and empty objects\n    // .filter(key => !(Object.keys(product[key]).length === 0 &&\n    //    product[key].constructor === Object)\n    // remove empty objects from arrays\n    .map(key => {\n      return Array.isArray(product[key])\n        ? {\n          [key]: product[key].filter(\n            element =>\n            // remove emty objects from array\n              !(\n                Object.keys(element).length === 0 &&\n                  element.constructor === Object\n              )\n          )\n        }\n        : {[key]: product[key]}\n    })\n    .filter(field => field[Object.keys(field)] !== undefined)\n    .reduce((obj, newField) => Object.assign(obj, newField), {})\n\nexport const removeEmptyObjectsFromArrays = curry(_removeEmptyObjectsFromArrays)\n\nexport const addValidationSummary = product => {\n  // define a default validationSummary\n  const validationSummary = {\n    isValid: false,\n    parentProduct: '',\n    brokenLinks: [],\n    missingFields: [],\n    missingMandatoryFields: [],\n    validationErrors: []\n  }\n  const hasValidationSummary =\n    product.hasOwnProperty('validationSummary') &&\n    Object.keys(product.validationSummary).every(key => {\n      return Object.keys(validationSummary).includes(key)\n    })\n\n  if (!hasValidationSummary) {\n    product = {...product, validationSummary}\n  }\n\n  return product\n}\n\nconst _schemaValidate = (jsonschema, addValidationSummary, schema, product) => {\n  product = addValidationSummary(product)\n  let {validationSummary} = product\n\n  const validationErrors = jsonschema\n    .validate(product, schema)\n    .errors.map(error => {\n      return error.stack\n    })\n\n  const hasValidationErrors = validationErrors.length > 0\n\n  if (hasValidationErrors) {\n    validationSummary = {...validationSummary, validationErrors}\n  }\n\n  return {...product, validationSummary}\n}\n\nconst curriedSchemaValidate = curry(_schemaValidate)\nexport const schemaValidate = curriedSchemaValidate(\n  jsonschema,\n  addValidationSummary\n)\n\nconst _addParentProduct = (addValidationSummary, prods, product) => {\n  product = addValidationSummary(product)\n  let {validationSummary} = product\n\n  const isLinked = product.hasOwnProperty('linked-id')\n\n  if (isLinked) {\n    const parentName = prods\n      .map(product => product.filename)\n      .filter(filename => filename.split('-')[0] === product['linked-id'])\n\n    validationSummary = {\n      ...validationSummary,\n      parentProduct: parentName[0] || ''\n    }\n  }\n\n  return {...product, validationSummary}\n}\n\nconst curriedAddParentProduct = curry(_addParentProduct)\nexport const addParentProduct = curriedAddParentProduct(addValidationSummary)\n\nconst _fillValidationSummary = (\n  allFieldsFromLinkedProduct,\n  MANDATORY_FIELDS,\n  product\n) => {\n  product = addValidationSummary(product)\n  let {validationSummary} = product\n\n  const missingFields = allFieldsFromLinkedProduct.filter(field => {\n    return !product.hasOwnProperty(field)\n  })\n\n  const missingMandatoryFields = missingFields.filter(field => {\n    return MANDATORY_FIELDS.includes(field)\n  })\n\n  const fieldsMissing = missingFields.length > 0\n  const mandatoryFieldsMissing = missingMandatoryFields.length > 0\n\n  if (fieldsMissing) {\n    validationSummary = {...validationSummary, missingFields}\n  }\n\n  if (mandatoryFieldsMissing) {\n    validationSummary = {...validationSummary, missingMandatoryFields}\n  }\n\n  return {...product, validationSummary}\n}\n\nconst curriedFillValidationSummary = curry(_fillValidationSummary)\nexport const fillValidationSummary = curriedFillValidationSummary(\n  ALL_FIELDS_FROM_LINKED_PRODUCT,\n  MANDATORY_FIELDS\n)\n\nconst _validateNutritionId = (addValidationSummary, nutrs, product) => {\n  product = addValidationSummary(product)\n  let {validationSummary} = product\n  const {brokenLinks} = validationSummary\n\n  const hasNutritionId = product.hasOwnProperty('nutrition-id')\n\n  if (hasNutritionId) {\n    const nutritionId = product['nutrition-id']\n    const linkedNutritionIdExists = nutrs.some(nutrObj => {\n      return nutrObj.id === nutritionId\n    })\n\n    if (!linkedNutritionIdExists) {\n      validationSummary = {\n        ...validationSummary,\n        brokenLinks: [...brokenLinks, 'nutrition-id']\n      }\n    }\n  }\n\n  return {...product, validationSummary}\n}\n\nconst curriedValidateNutritionId = curry(_validateNutritionId)\nexport const validateNutritionId = curriedValidateNutritionId(\n  addValidationSummary\n)\n\nconst _validateNutrChangeId = (addValidationSummary, nutrChange, product) => {\n  product = addValidationSummary(product)\n  let {validationSummary} = product\n  const {brokenLinks} = validationSummary\n\n  const hasProcesses = product.hasOwnProperty('processes') && product.processes\n\n  const hasNutritionChangeId = hasProcesses\n    ? product.processes.length > 0 &&\n      product.processes[0].hasOwnProperty('nutr-change-id')\n    : false\n\n  if (hasNutritionChangeId) {\n    const {processes} = product\n    const allNutritionChangeIds = processes.map(processesObj => {\n      return processesObj['nutr-change-id']\n    })\n\n    const linkedNutritionChangeIdsExist = allNutritionChangeIds.every(\n      nutritionChangeId => {\n        return nutrChange.some(nutrChangeObj => {\n          return nutrChangeObj.id === nutritionChangeId\n        })\n      }\n    )\n\n    if (!linkedNutritionChangeIdsExist) {\n      validationSummary = {\n        ...validationSummary,\n        brokenLinks: [...brokenLinks, 'nutr-change-id']\n      }\n    }\n  }\n\n  return {...product, validationSummary}\n}\n\nconst curriedValidateNutritionChangeId = curry(_validateNutrChangeId)\nexport const validateNutrChangeId = curriedValidateNutritionChangeId(\n  addValidationSummary\n)\n\nexport const classify = product => {\n  let {validationSummary} = product\n\n  if (!validationSummary) {\n    throw new Error('Cannot classify product without validationSummary')\n  }\n\n  const {\n    brokenLinks,\n    missingMandatoryFields,\n    validationErrors\n  } = validationSummary\n  const hasBrokenLinks = brokenLinks.length > 0\n  const hasMissingMandatoryFields = missingMandatoryFields.length > 0\n  const hasValidationErrors = validationErrors.length > 0\n  const isValid =\n    !hasBrokenLinks && !hasMissingMandatoryFields && !hasValidationErrors\n  validationSummary = {...validationSummary, isValid}\n  return {...product, validationSummary}\n}\n\nconst _getFieldFromParent = (prods, parentProduct, field) => {\n  const validatedParentProduct = addParentProduct(prods, parentProduct)\n  const {validationSummary} = validatedParentProduct\n  let pulledField = {}\n\n  const fieldExistsInParent = parentProduct.hasOwnProperty(field)\n  // parentProduct is '' (falsy) when no linked-id is given or no product with\n  // the linked id exists\n  const isLinked = validationSummary.parentProduct\n\n  if (fieldExistsInParent) {\n    pulledField = {[field]: parentProduct[field]}\n  } else if (isLinked) {\n    const grandParent = prods.filter(product => {\n      return product.filename === validationSummary.parentProduct\n    })[0]\n    const validatedGrandParent = addParentProduct(prods, grandParent)\n    return _getFieldFromParent(prods, validatedGrandParent, field)\n  } else {\n    pulledField = {[field]: 'NOT_RESOLVABLE'}\n  }\n\n  return pulledField\n}\n\nexport const getFieldFromParent = curry(_getFieldFromParent)\n\nconst _pullFieldsFromParent = (getFieldFromParent, prods, validatedProduct) => {\n  const {missingFields} = validatedProduct.validationSummary\n\n  const pulledFields = missingFields\n    .map(field => getFieldFromParent(prods, validatedProduct, field))\n    .filter(field => field[Object.keys(field)] !== 'NOT_RESOLVABLE')\n    .reduce((prev, curr) => ({...prev, ...curr}), {})\n\n  return pulledFields\n}\n\nconst curriedPullFieldsFromParent = curry(_pullFieldsFromParent)\nexport const pullFieldsFromParent = curriedPullFieldsFromParent(\n  getFieldFromParent\n)\n\nconst _pullAndAddFieldsFromParent = (pullFieldsFromParent, prods, product) => {\n  const pulledFields = pullFieldsFromParent(prods, product)\n  return {...product, ...pulledFields}\n}\n\nconst curriedPullAndAddFieldsFromParent = curry(_pullAndAddFieldsFromParent)\nexport const pullAndAddFieldsFromParent = curriedPullAndAddFieldsFromParent(\n  pullFieldsFromParent\n)\n"]}